// import { NextRequest, NextResponse } from 'next/server';
// //HELP: –º–∏–¥–ª–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –∫—É–∫–∞—Ö
// export function middleware(req: NextRequest) {
// 	const url = req.nextUrl;
// 	const mapParam = url.searchParams.get('map') || null;
// 	const res = NextResponse.next();
// 	// res.cookies.set('map', mapParam || 'null');
// 	//HELP: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å—Ç—å
// 	if (mapParam) {
// 		res.cookies.set('map', mapParam);
// 	} else {
// 		//HELP: –£–¥–∞–ª—è–µ–º –∫—É–∫—É –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç
// 		res.cookies.delete('map');
// 	}
// 	return res;
// }
// export const config = {
// 	matcher: '/', // HELP: –º–∞—Ä—à—Ä—É—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è middleware
// };
//HELP: –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
import { NextRequest, NextResponse } from 'next/server';

import { TOKEN } from './app.constants';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
interface GetObjectsResponse {
	url?: string;
	map?: string;
	points: any;
	// –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
}

export async function middleware(req: NextRequest) {
	const url = req.nextUrl;
	const pathname = url.pathname;
	const mapParam = url.searchParams.get('map');

	// –°–ª—É—á–∞–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –ø–æ SEO URL (–Ω–∞–ø—Ä–∏–º–µ—Ä /map/renovation)
	const seoUrlMatch = pathname.match(/^\/map\/(.+)$/);

	if (seoUrlMatch) {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –ø–æ –ß–ü–£ URL - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
		const seoSlug = seoUrlMatch[1];

		// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ URL
		const mapId = await getMapIdByUrl(seoSlug, req);
		// console.log('test mapid', mapId);

		if (mapId) {
			// –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π URL –¥–ª—è —Ä–∞–±–æ—Ç—ã –ª–æ–≥–∏–∫–∏
			const newUrl = new URL('/', req.url);
			newUrl.searchParams.set('map', mapId);

			const response = NextResponse.rewrite(newUrl);
			response.headers.set('x-seo-url', seoSlug);
			response.cookies.set('map', mapId);

			return response;
		} else {
			return new NextResponse('Not Found', { status: 404 });
		}
	}

	// –°–ª—É—á–∞–π 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª —Å ?map= - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ SEO URL
	if (mapParam && pathname === '/') {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ URL
		const mapData = await getMapData(mapParam, req);

		if (mapData?.url) {
			// –ó–î–ï–°–¨ –ù–ê–°–¢–û–Ø–©–ò–ô 301 —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ SEO URL
			const seoUrl = new URL(`/map/${mapData.url}`, req.url);
			return NextResponse.redirect(seoUrl, 301);
		}
	}

	// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ map
	const res = NextResponse.next();

	if (mapParam) {
		res.cookies.set('map', mapParam);
	} else {
		res.cookies.delete('map');
	}

	return res;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã (–≤–∫–ª—é—á–∞—è URL)
async function getMapData(
	mapId: string,
	req: NextRequest,
): Promise<{ url?: string; map?: string } | null> {
	try {
		const authToken = req.cookies.get(TOKEN)?.value;
		if (!authToken) {
			console.error('No auth token found in cookies');
			return null;
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API URL
		const apiUrl = `${process.env.NEXT_PUBLIC_API_URL || ''}/api/get_objects.php?map=${mapId}`;

		const headers: HeadersInit = {
			'Content-Type': 'application/json',
			'Access-Token': `${authToken}`,
		};

		const response = await fetch(apiUrl, {
			method: 'GET',
			headers,
		});

		if (!response.ok) {
			console.error(
				`API request failed: ${response.status} ${response.statusText}`,
			);
			return null;
		}

		return response.json();
	} catch (error) {
		console.error('Error fetching map data:', error);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ä—Ç—ã –ø–æ SEO URL
async function getMapIdByUrl(
	seoSlug: string,
	req: NextRequest,
): Promise<string | null> {
	try {
		const authToken = req.cookies.get(TOKEN)?.value;
		if (!authToken) {
			console.error('No auth token found in cookies');
			return null;
		}
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API URL
		const apiUrl = `${process.env.NEXT_PUBLIC_API_URL || ''}/api/get_objects.php?url=${seoSlug}`;

		const headers: HeadersInit = {
			'Content-Type': 'application/json',
			'Access-Token': `${authToken}`,
		};

		const response = await fetch(apiUrl, {
			method: 'GET',
			headers,
		});

		if (!response.ok) {
			console.error(
				`API request failed: ${response.status} ${response.statusText}`,
			);
			return null;
		}

		const data: GetObjectsResponse = await response.json();

		return data.map || null;
	} catch (error) {
		console.error('Error fetching map ID by URL:', error);
		return null;
	}
}

export const config = {
	matcher: ['/', '/map/:path*'], // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É SEO URLs
};

// import { NextRequest, NextResponse } from 'next/server';

// import { ACTUAL_MAP } from './app.constants';

// export async function middleware(req: NextRequest) {
// 	const { searchParams } = req.nextUrl;
// 	const mapParam = searchParams.get('map');

// 	console.log('üîç Middleware triggered for:', req.nextUrl.href);
// 	console.log('üìç Map param:', mapParam);

// 	// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ?map=...
// 	if (mapParam) {
// 		try {
// 			console.log('üåê Making API request...');
// 			const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/get_objects.php?map=${mapParam}`;
// 			console.log('üì° API URL:', apiUrl);

// 			const response = await fetch(apiUrl, {
// 				method: 'GET',
// 				headers: { 'Content-Type': 'application/json' },
// 			});

// 			console.log('üìä API Response status:', response.status);

// 			if (response.ok) {
// 				const data = await response.json();
// 				console.log('üìÑ API Response data:', data);

// 				const mapUrl = data.url && data.url.trim() !== '' ? data.url : null;

// 				// –µ—Å–ª–∏ –µ—Å—Ç—å –ß–ü–£ url ‚Üí –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
// 				if (mapUrl) {
// 					const newUrl = new URL(`/map/${mapUrl}`, req.url);

// 					// –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ map
// 					searchParams.delete('map');
// 					searchParams.forEach((value, key) => {
// 						newUrl.searchParams.set(key, value);
// 					});

// 					console.log('üîÑ Redirecting to:', newUrl.toString());

// 					// —Å–æ–∑–¥–∞—ë–º redirect response –∏ —Ç—É–¥–∞ –∂–µ —Å–µ—Ç–∏–º –∫—É–∫—É
// 					const redirectRes = NextResponse.redirect(newUrl, 301);
// 					console.log('test data', data);
// 					// redirectRes.cookies.set(ACTUAL_MAP, String(data.map));
// 					redirectRes.cookies.set({
// 						name: ACTUAL_MAP,
// 						value: String(data.map),
// 						path: '/', // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// 						httpOnly: false, // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —á–∏—Ç–∞—Ç—å –µ—ë –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
// 						sameSite: 'lax', // –∏–ª–∏ strict
// 						secure: process.env.NODE_ENV === 'production',
// 					});

// 					return redirectRes;
// 				}

// 				// –µ—Å–ª–∏ –ß–ü–£ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º url, –Ω–æ —Å—Ç–∞–≤–∏–º –∫—É–∫—É
// 				const nextRes = NextResponse.next();
// 				// nextRes.cookies.set(ACTUAL_MAP, String(data.map));
// 				nextRes.cookies.set({
// 					name: ACTUAL_MAP,
// 					value: String(data.map),
// 					path: '/',
// 					httpOnly: false,
// 					sameSite: 'lax',
// 					secure: process.env.NODE_ENV === 'production',
// 				});
// 				return nextRes;
// 			} else {
// 				console.log('‚ùå API request failed');
// 			}
// 		} catch (error) {
// 			console.error('üí• Error checking URL:', error);
// 		}
// 	}

// 	// // –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?map= –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
// 	// const res = NextResponse.next();
// 	// if (mapParam) {
// 	// 	res.cookies.set(ACTUAL_MAP, mapParam);
// 	// } else {
// 	// 	res.cookies.delete(ACTUAL_MAP);
// 	// }
// 	// return res;
// }

// export const config = {
// 	matcher: [
// 		'/',
// 		'/((?!api/|_next/|images/|fonts/|favicon.ico|.*\\.(?:ico|png|jpg|jpeg|gif|svg|webp|otf|ttf|woff|woff2)$).*)',
// 	],
// };

// //HELP: —Å –Ω–æ–≤—ã–º —Ä–æ—É—Ç–æ–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ url
// import { NextRequest, NextResponse } from 'next/server';

// import { ACTUAL_MAP } from './app.constants';

// export async function middleware(req: NextRequest) {
// 	const { searchParams } = req.nextUrl;
// 	const mapParam = searchParams.get('map');
// 	const res = NextResponse.next();
// 	console.log('üîç Middleware triggered for:', req.nextUrl.href);
// 	console.log('üìç Map param:', mapParam);
// 	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ß–ü–£ —Ä–µ–¥–∏—Ä–µ–∫—Ç
// 	if (mapParam) {
// 		try {
// 			console.log('üåê Making API request...');
// 			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π API
// 			const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/get_objects.php?map=${mapParam}`;
// 			console.log('üì° API URL:', apiUrl);
// 			const response = await fetch(apiUrl, {
// 				method: 'GET',
// 				headers: {
// 					'Content-Type': 'application/json',
// 				},
// 			});
// 			console.log('üìä API Response status:', response.status);
// 			if (response.ok) {
// 				const data = await response.json();
// 				console.log('üìÑ API Response data:', data);
// 				const mapUrl = data.url && data.url.trim() !== '' ? data.url : null;
// 				// res.cookies.set(ACTUAL_MAP, data.map);
// 				console.log('üíæ Found URL:', mapUrl);
// 				// –ï—Å–ª–∏ –µ—Å—Ç—å –ß–ü–£ URL, –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
// 				if (mapUrl) {
// 					const newUrl = new URL(`/map/${mapUrl}`, req.url);
// 					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∫—Ä–æ–º–µ map)
// 					searchParams.delete('map');
// 					searchParams.forEach((value, key) => {
// 						newUrl.searchParams.set(key, value);
// 					});
// 					console.log('üîÑ Redirecting to:', newUrl.toString());
// 					const redirectRes = NextResponse.redirect(newUrl, 301);
// 					redirectRes.cookies.set(ACTUAL_MAP, String(data.map));

// 					return redirectRes;
// 					// return NextResponse.redirect(newUrl, 301);
// 				}
// 			} else {
// 				console.log('‚ùå API request failed');
// 			}
// 		} catch (error) {
// 			console.error('üí• Error checking URL:', error);
// 		}
// 	}
// 	// –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Å –∫—É–∫–∞–º–∏
// 	const mapParamForCookie = searchParams.get('map') || null;

// 	if (mapParamForCookie) {
// 		res.cookies.set(ACTUAL_MAP, mapParamForCookie);
// 	} else {
// 		res.cookies.delete(ACTUAL_MAP);
// 	}
// 	return res;
// }
// export const config = {
// 	matcher: [
// 		'/',
// 		'/((?!api/|_next/|images/|fonts/|favicon.ico|.*\\.(?:ico|png|jpg|jpeg|gif|svg|webp|otf|ttf|woff|woff2)$).*)',
// 	],
// };
