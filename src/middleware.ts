// import { NextRequest, NextResponse } from 'next/server';
// //HELP: –º–∏–¥–ª–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –∫—É–∫–∞—Ö
// export function middleware(req: NextRequest) {
// 	const url = req.nextUrl;
// 	const mapParam = url.searchParams.get('map') || null;
// 	const res = NextResponse.next();
// 	// res.cookies.set('map', mapParam || 'null');
// 	//HELP: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å—Ç—å
// 	if (mapParam) {
// 		res.cookies.set('map', mapParam);
// 	} else {
// 		//HELP: –£–¥–∞–ª—è–µ–º –∫—É–∫—É –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç
// 		res.cookies.delete('map');
// 	}
// 	return res;
// }
// export const config = {
// 	matcher: '/', // HELP: –º–∞—Ä—à—Ä—É—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è middleware
// };
// //HELP: —Å –Ω–æ–≤—ã–º —Ä–æ—É—Ç–æ–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ url
// import { NextRequest, NextResponse } from 'next/server';
// export async function middleware(req: NextRequest) {
// 	const { searchParams } = req.nextUrl;
// 	const mapParam = searchParams.get('map');
// 	console.log('üîç Middleware triggered for:', req.nextUrl.href);
// 	console.log('üìç Map param:', mapParam);
// 	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ß–ü–£ —Ä–µ–¥–∏—Ä–µ–∫—Ç
// 	if (mapParam) {
// 		try {
// 			console.log('üåê Making API request...');
// 			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π API
// 			const apiUrl = `https://mosmap.ru/api/get_objects.php?map=${mapParam}`;
// 			console.log('üì° API URL:', apiUrl);
// 			const response = await fetch(apiUrl, {
// 				method: 'GET',
// 				headers: {
// 					'Content-Type': 'application/json',
// 				},
// 			});
// 			console.log('üìä API Response status:', response.status);
// 			if (response.ok) {
// 				const data = await response.json();
// 				console.log('üìÑ API Response data:', data);
// 				const mapUrl = data.url && data.url.trim() !== '' ? data.url : null;
// 				console.log('üíæ Found URL:', mapUrl);
// 				// –ï—Å–ª–∏ –µ—Å—Ç—å –ß–ü–£ URL, –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
// 				if (mapUrl) {
// 					const newUrl = new URL(`/custom-url/${mapUrl}`, req.url);
// 					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∫—Ä–æ–º–µ map)
// 					searchParams.delete('map');
// 					searchParams.forEach((value, key) => {
// 						newUrl.searchParams.set(key, value);
// 					});
// 					console.log('üîÑ Redirecting to:', newUrl.toString());
// 					return NextResponse.redirect(newUrl, 301);
// 				}
// 			} else {
// 				console.log('‚ùå API request failed');
// 			}
// 		} catch (error) {
// 			console.error('üí• Error checking URL:', error);
// 		}
// 	}
// 	// –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Å –∫—É–∫–∞–º–∏
// 	const mapParamForCookie = searchParams.get('map') || null;
// 	const res = NextResponse.next();
// 	if (mapParamForCookie) {
// 		res.cookies.set('map', mapParamForCookie);
// 	} else {
// 		res.cookies.delete('map');
// 	}
// 	return res;
// }
// export const config = {
// 	matcher: [
// 		'/',
// 		'/((?!api/|_next/|images/|fonts/|favicon.ico|.*\\.(?:ico|png|jpg|jpeg|gif|svg|webp|otf|ttf|woff|woff2)$).*)',
// 	],
// };
//HELP: –≤–∞—Ä–∏–∞–Ω—Ç —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
import { NextRequest, NextResponse } from 'next/server';

export async function middleware(req: NextRequest) {
	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
	console.log('üöÄ MIDDLEWARE START:', req.nextUrl.href);

	const { searchParams } = req.nextUrl;
	const mapParam = searchParams.get('map');

	console.log(
		'üîç All search params:',
		Object.fromEntries(searchParams.entries()),
	);
	console.log('üìç Map param extracted:', mapParam);

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ß–ü–£ —Ä–µ–¥–∏—Ä–µ–∫—Ç
	if (mapParam && mapParam !== 'null') {
		console.log('‚úÖ Map param found, starting API check...');

		// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ mapParam —É–∂–µ –ß–ü–£-—Å—Å—ã–ª–∫–æ–π
		// –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—Ä–µ –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —É–∂–µ –ß–ü–£
		const isAlreadySlug = /[a-zA-Z-_]/.test(mapParam) && mapParam.length > 3;

		if (isAlreadySlug) {
			console.log(
				'üîÑ Map param looks like a slug already:',
				mapParam,
				'- skipping redirect',
			);
		} else {
			try {
				console.log('üåê Making API request...');

				// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π API
				const apiUrl = `https://mosmap.ru/api/get_objects.php?map=${mapParam}`;

				console.log('üì° API URL:', apiUrl);

				const response = await fetch(apiUrl, {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				console.log('üìä API Response status:', response.status);

				if (response.ok) {
					const data = await response.json();
					console.log('üìÑ API Response data:', data);

					const mapUrl = data.url && data.url.trim() !== '' ? data.url : null;
					console.log('üíæ Found URL:', mapUrl);

					// –ï—Å–ª–∏ –µ—Å—Ç—å –ß–ü–£ URL, –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
					if (mapUrl && mapUrl !== mapParam) {
						// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
						// –°–æ–∑–¥–∞–µ–º URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
						const newUrl = new URL(req.url);
						newUrl.pathname = '/';

						// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä map
						newUrl.searchParams.delete('map');
						// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π map —Å –ß–ü–£ –∑–Ω–∞—á–µ–Ω–∏–µ–º
						newUrl.searchParams.set('map', mapUrl);

						console.log('üîÑ NEW URL CREATED:', newUrl.toString());
						console.log('üîÑ Redirecting with status 301...');

						const redirectResponse = NextResponse.redirect(newUrl, 301);
						console.log('üîÑ REDIRECT RESPONSE CREATED');
						return redirectResponse;
					} else {
						console.log(
							'‚ùå No URL found in API response or URL same as current',
						);
					}
				} else {
					console.log('‚ùå API request failed with status:', response.status);
				}
			} catch (error) {
				console.error('üí• Error in API request:', error);
			}
		}
	} else {
		console.log('‚ùå No valid map param found');
	}

	// –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Å –∫—É–∫–∞–º–∏
	console.log('üç™ Setting cookie logic...');
	const mapParamForCookie = searchParams.get('map') || null;
	const res = NextResponse.next();

	if (mapParamForCookie && mapParamForCookie !== 'null') {
		console.log('üç™ Setting cookie:', mapParamForCookie);
		res.cookies.set('map', mapParamForCookie);
	} else {
		console.log('üç™ Deleting cookie');
		res.cookies.delete('map');
	}

	console.log('‚úÖ MIDDLEWARE END - returning NextResponse.next()');
	return res;
}

export const config = {
	matcher: [
		'/',
		'/((?!api/|_next/|images/|fonts/|favicon.ico|.*\\.(?:ico|png|jpg|jpeg|gif|svg|webp|otf|ttf|woff|woff2)$).*)',
	],
};
